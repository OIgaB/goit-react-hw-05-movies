{"version":3,"file":"static/js/739.569bcd03.chunk.js","mappings":"gRA0BA,EA1BkB,SAAC,GAAe,IAAbA,EAAY,EAAZA,MACjBC,QAAQC,IAAI,wBACZ,IAAQC,EAA8EH,EAA9EG,eAAgBC,EAA8DJ,EAA9DI,OAAQC,EAAsDL,EAAtDK,SAAUC,EAA4CN,EAA5CM,YAAaC,EAA+BP,EAA/BO,aAAcC,EAAiBR,EAAjBQ,aAC/DC,EAAO,IAAIC,KAAKF,GAElB,OACA,iCACI,eAAIG,UAAU,kBAAd,SAAgC,oBAChC,+BACKL,IAAe,gBAAKM,IAAI,eAAeC,IAAG,8CAAyCP,GAAeQ,MAAM,SACzG,wBAAKX,KACL,yBAAG,IAAEM,EAAKM,cAAc,OACvBR,IACG,yBAAG,eACC,4BAAiC,GAA1BA,EAAaS,QAAQ,GAAQ,OAAQ,UAGpD,wBAAI,cACJ,uBAAIX,KACJ,wBAAI,YACJ,uBAAID,GAAUA,EAAOa,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,aAIlE,E,SCAD,EAnBe,WACX,OACI,SAAC,KAAD,CACIC,OAAO,KACPP,MAAM,KACNQ,UAAU,uBACVC,aAAc,CACVC,SAAU,QACVC,IAAK,MACLC,KAAM,MACNC,UAAW,yBAEfC,aAAa,uBACbC,YAAc,UACdC,SAAW,WAGtB,ECkCD,EAjDsB,WAElB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAO/B,EAAP,KAAcgC,EAAd,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAkBC,EAAAA,EAAAA,OAGxBC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAY,mCAAG,+FACjBR,GAAW,GADM,kBAGUS,EAAAA,EAAAA,eAAmBR,GAH7B,gBAGLS,EAHK,EAGLA,KACFC,EAAsB,CAACD,GAAM3B,KAAI,kBAAuF,CAAE6B,GAAzF,EAAGA,GAA0F3C,eAA7F,EAAOA,eAAsGC,OAA7G,EAAuBA,OAA8FC,SAArH,EAA+BA,SAAgGC,YAA/H,EAAyCA,YAAmGC,aAA5I,EAAsDA,aAAoGC,aAA1J,EAAoEA,aAApE,IACvCwB,EAAQ,WAAR,UAAYa,IALC,kDAOf5C,QAAQC,IAAI,KAAM6C,SAPH,yBASbb,GAAW,GATE,6EAAH,qDAYlBQ,GAEH,GAAE,CAACP,IAMP,OACG,iCACI,yBAAK,+BACL,mBAAQa,KAAK,SAASC,QAPN,WAAO,IAAD,EACtBZ,EAAQ,UAACE,EAAgBW,aAAjB,QAA0B,IACrC,EAKG,SAA4C,YAC1CjB,IAAW,SAAC,EAAD,KACb,SAAC,EAAD,CAAWjC,MAAOA,KAClB,2BACI,yBACI,SAAC,KAAD,CAAMmD,GAAG,OAAT,SAAgB,YAEpB,yBACI,SAAC,KAAD,CAAMA,GAAG,UAAT,SAAmB,mBAMlC,C,8DCpDKC,EAAW,8BAGXC,EAAU,CACZC,OAAQ,MACRC,QAAS,CACLC,OAAQ,mBACRC,cAAe,+NAIjBC,EAAmB,mCAAG,uGAEPC,EAAAA,EAAAA,IAAA,UAAaP,EAAb,8CAAmEC,GAF5D,8EAId,IAAIO,MAAM,KAAMb,SAJF,wDAAH,qDAQnBc,EAAc,mCAAG,WAAOC,GAAP,0FAEFH,EAAAA,EAAAA,IAAA,UAAaP,EAAb,mBAAgCU,EAAhC,0BAAiET,GAF/D,8EAIT,IAAIO,MAAM,KAAMb,SAJP,wDAAH,sDASdJ,EAAM,CACRe,oBAAAA,EACAG,eAAAA,GAGJ,K","sources":["components/MovieCard/MovieCard.jsx","components/Layout/Loader.jsx","components/pages/MovieDetails/MovieDetails.jsx","services/themoviedb-api.js"],"sourcesContent":["const MovieCard = ({ movie }) => {  \n    console.log('Hello from MovieCard');\n    const { original_title, genres, overview, poster_path, vote_average, release_date } = movie;  //id        \n    const date = new Date(release_date); // конвертація дати з 2023-03-02 в Thu Mar 02 2023 02:00:00 GMT+0200 щоб потім дістати рік\n\n        return (\n        <>\n            <h2 className=\"visually-hidden\">Selected Movie</h2>\n            <section>\n                {poster_path && <img alt=\"movie poster\" src={`https://image.tmdb.org/t/p/original/${poster_path}`} width='250'/>}\n                <h3>{original_title}</h3>\n                <p>({date.getFullYear()})</p>\n                {vote_average && \n                    <p>User Score: \n                        <span>{vote_average.toFixed(1) * 10}%</span>   {/* toFixed округлення дробових чисел (після коми 1 цифра)   */}\n                    </p>\n                }  \n                <h4>Overview</h4>\n                <p>{overview}</p>\n                <h4>Genres</h4>\n                <p>{genres && genres.map(genre => genre.name).join(\", \")}</p>\n            </section>\n        </>\n    );\n}\n\nexport default MovieCard;\n\n","//Компонент спінера відображається, доки відбувається завантаження зображень. \n\nimport { ProgressBar } from  'react-loader-spinner';\n\n\nconst Loader = () => {\n    return (\n        <ProgressBar\n            height=\"90\"\n            width=\"90\"\n            ariaLabel=\"progress-bar-loading\"\n            wrapperStyle={{\n                position: 'fixed',\n                top: '20%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n            }}\n            wrapperClass=\"progress-bar-wrapper\"\n            borderColor = '#f4e02e'\n            barColor = '#515dff'\n        />\n    );\n};\n\nexport default Loader;","import { useState, useEffect } from \"react\"; \nimport { useLocation, useNavigate, useParams, Link } from \"react-router-dom\";\nimport api from '../../../services/themoviedb-api';\nimport MovieCard from '../../MovieCard/MovieCard';\nimport Loader from \"components/Layout/Loader\";\n\n\nconst  MovieDetails = () => {\n    // console.log('агов  MovieDetails!');\n    const [movie, setMovie] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const { movieId } = useParams();\n    const navigate = useNavigate();\n    const locationDetails = useLocation();\n\n      \n    useEffect(() => {\n        const getMovieByID = async () => {     // основна ф-ція запиту на бекенд\n            setLoading(true);\n            try {\n                const { data } = await api.fetchMovieByID(movieId);   // запит на бекенд і відповідь\n                const filteredApiResponse = [data].map(({ id, original_title, genres, overview, poster_path, vote_average, release_date}) => ({ id, original_title, genres, overview, poster_path, vote_average, release_date })); //shorthand; усі властивості не потрібні\n                setMovie(...filteredApiResponse); // запис в стейт відфільтрованих фільмів\n            } catch(error) {\n              console.log(error.message); \n            } finally {\n                setLoading(false);\n            }\n        }\n        getMovieByID();\n\n    }, [movieId]);\n\n    const handleClick = () => {\n        navigate(locationDetails.state ?? '/')\n    };\n\n return (\n    <>\n        <div>Це MovieDetails</div>\n        <button type=\"button\" onClick={handleClick}>Go back</button>\n        { loading && <Loader /> }\n        <MovieCard movie={movie} />\n        <ul>\n            <li>\n                <Link to='cast'>Cast</Link>\n            </li>\n            <li>\n                <Link to='reviews'>Reviews</Link>\n            </li>       \n        </ul>\n        {/* <Outlet/> */}\n    </>\n )\n}\n\nexport default MovieDetails;","import axios from \"axios\";\n// const API_KEY = 'a4250a03837bc1c40ada38b67b4134e3';\nconst BASE_URL = 'https://api.themoviedb.org/';\n\n\nconst options = {\n    method: 'GET',\n    headers: {\n        accept: 'application/json',\n        Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJhNDI1MGEwMzgzN2JjMWM0MGFkYTM4YjY3YjQxMzRlMyIsInN1YiI6IjY0N2FmOGQ2ZTMyM2YzMDBjNDI5ZDU1YiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.v-u6MiKiDbohMjislfmvIWqj_E9JTpeDNp3nEaFfpD0'\n    }\n};\n\nconst fetchTrendingMovies = async () => {\n    try {\n        return await axios.get(`${BASE_URL}3/trending/movie/day?language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\nconst fetchMovieByID = async (movieID) => {\n    try {\n        return await axios.get(`${BASE_URL}3/movie/${movieID}?language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\n\nconst api = {\n    fetchTrendingMovies,\n    fetchMovieByID,\n};\n\nexport default api;"],"names":["movie","console","log","original_title","genres","overview","poster_path","vote_average","release_date","date","Date","className","alt","src","width","getFullYear","toFixed","map","genre","name","join","height","ariaLabel","wrapperStyle","position","top","left","transform","wrapperClass","borderColor","barColor","useState","setMovie","loading","setLoading","movieId","useParams","navigate","useNavigate","locationDetails","useLocation","useEffect","getMovieByID","api","data","filteredApiResponse","id","message","type","onClick","state","to","BASE_URL","options","method","headers","accept","Authorization","fetchTrendingMovies","axios","Error","fetchMovieByID","movieID"],"sourceRoot":""}
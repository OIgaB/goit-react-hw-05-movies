{"version":3,"file":"static/js/827.df26b7a0.chunk.js","mappings":"6JAwBA,IAnBe,WACX,OACI,SAAC,KAAD,CACIA,OAAO,KACPC,MAAM,KACNC,UAAU,uBACVC,aAAc,CACVC,SAAU,QACVC,IAAK,MACLC,KAAM,MACNC,UAAW,yBAEfC,aAAa,uBACbC,YAAc,UACdC,SAAW,WAGtB,C,iLCpBYC,EAAOC,EAAAA,GAAAA,GAAH,wQAWJC,EAAOD,EAAAA,GAAAA,EAAH,+CAIJE,EAAWF,EAAAA,GAAAA,GAAH,+CAIRG,EAAeH,EAAAA,GAAAA,IAAH,+D,SCGzB,EApBiB,SAAC,GAAc,IAAZI,EAAW,EAAXA,KAChB,OACQ,SAACL,EAAD,UACKK,GAAQA,EAAKC,KAAI,YAA0C,IAAxCC,EAAuC,EAAvCA,GAAIC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,UACxC,OAAO,UAACP,EAAD,YACH,SAACC,EAAD,WACK,gBAAKO,IAAKH,EAAY,8CACsBA,G,iwJAEvCI,IAAKH,OAGf,SAACP,EAAD,UAAOO,IACNC,IAAa,yBAAG,eAAW,0BAAOA,SATjBH,EAWzB,KAGhB,ECcD,EA9Ba,WACT,IAAQM,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOV,EAAP,KAAaW,EAAb,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KAmBH,OAjBGC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAW,mCAAG,+FAChBF,GAAW,GADK,kBAGWG,EAAAA,EAAAA,cAAkBR,GAH7B,gBAGJS,EAHI,EAGJA,KACFC,EAAsBD,EAAKjB,KAAKC,KAAI,kBAA4C,CAAEC,GAA9C,EAAGA,GAA+CE,KAAlD,EAAOA,KAAiDC,UAAxD,EAAaA,UAAsDF,aAAnE,EAAwBA,aAAxB,IAC1CQ,EAAQO,GALI,kDAOdC,QAAQC,IAAI,KAAMC,SAPJ,yBASZR,GAAW,GATC,6EAAH,qDAYjBE,GAEH,GAAE,CAACP,KAGJ,gCACMI,IAAW,SAACU,EAAA,EAAD,IACXtB,EAAKuB,OAAS,IAAK,SAAC,EAAD,CAAUvB,KAAMA,IAAS,QAGrD,C,kECjCKwB,EAAW,8BAEXC,EAAU,CACZC,OAAQ,MACRC,QAAS,CACLC,OAAQ,mBACRC,cAAe,+NAKjBC,EAAmB,mCAAG,uGAEPC,EAAAA,EAAAA,IAAA,UAAaP,EAAb,8CAAmEC,GAF5D,8EAId,IAAIO,MAAM,KAAMX,SAJF,wDAAH,qDAQnBY,EAAc,mCAAG,WAAOC,GAAP,0FAEFH,EAAAA,EAAAA,IAAA,UAAaP,EAAb,mBAAgCU,EAAhC,0BAAiET,GAF/D,8EAIT,IAAIO,MAAM,KAAMX,SAJP,wDAAH,sDAQdc,EAAa,mCAAG,WAAOD,GAAP,0FAEDH,EAAAA,EAAAA,IAAA,UAAaP,EAAb,mBAAgCU,EAAhC,kCAAyET,GAFxE,8EAIR,IAAIO,MAAM,KAAMX,SAJR,wDAAH,sDAQbe,EAAe,mCAAG,WAAOF,GAAP,0FAEHH,EAAAA,EAAAA,IAAA,UAAaP,EAAb,mBAAgCU,EAAhC,kCAAyET,GAFtE,8EAIV,IAAIO,MAAM,KAAMX,SAJN,wDAAH,sDAQfgB,EAAsB,mCAAG,WAAOC,GAAP,0FAEVP,EAAAA,EAAAA,IAAA,UAAaP,EAAb,gCAA6Cc,EAA7C,8CAAkGb,GAFxF,8EAIjB,IAAIO,MAAM,KAAMX,SAJC,wDAAH,sDAStBL,EAAM,CACRc,oBAAAA,EACAG,eAAAA,EACAE,cAAAA,EACAC,gBAAAA,EACAC,uBAAAA,GAGJ,K","sources":["components/Loader/Loader.jsx","components/CastList/styled.js","components/CastList/CastList.jsx","pages/Cast/Cast.jsx","services/themoviedb-api.js"],"sourcesContent":["//Компонент спінера відображається, доки відбувається завантаження зображень. \n\nimport { ProgressBar } from  'react-loader-spinner';\n\n\nconst Loader = () => {\n    return (\n        <ProgressBar\n            height=\"90\"\n            width=\"90\"\n            ariaLabel=\"progress-bar-loading\"\n            wrapperStyle={{\n                position: 'fixed',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n            }}\n            wrapperClass=\"progress-bar-wrapper\"\n            borderColor = '#f4e02e'\n            barColor = '#515dff'\n        />\n    );\n};\n\nexport default Loader;","import styled from 'styled-components';\n\nexport const List = styled.ul`\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(186px, 1fr));\n    grid-column-gap: 8px;\n    margin: 30px auto;\n    padding: 25px;\n    text-align: center;\n    background-color: #f9a504;\n    border-radius: 4px;\n`; \n\nexport const Name = styled.p`\n    font-weight: 700;\n`; \n\nexport const ListItem = styled.li`\n    list-style: none;\n`;\n\nexport const ImageWrapper = styled.div`\n    width: 200px;\n    height: 300px;\n`; ","import { List, Name, ListItem, ImageWrapper } from './styled';\nimport PlaceholderImg from '../../services/placeholderImg.png';\nimport PropTypes from 'prop-types';\n\nconst CastList = ({ cast }) => {\n    return (\n            <List>\n                {cast && cast.map(({id, profile_path, name, character}) => {\n                    return <ListItem key={id}>\n                        <ImageWrapper>\n                            {<img src={profile_path \n                                ? `https://image.tmdb.org/t/p/original/${profile_path}`\n                                : PlaceholderImg\n                                } alt={name} />\n                            }\n                        </ImageWrapper>\n                        <Name>{name}</Name>\n                        {character && <p>Character: <span>{character}</span></p>}\n                    </ListItem>  \n                })}\n            </List>\n    );\n}\n\nexport default CastList;\n\nCastList.propTypes = {\n    cast: PropTypes.arrayOf(PropTypes.shape ({\n        id: PropTypes.number.isRequired,\n        profile_path: PropTypes.string,\n        name: PropTypes.string.isRequired,\n        character: PropTypes.string.isRequired,\n    })),\n};","import { useState, useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport api from '../../services/themoviedb-api';\nimport Loader from \"../../components/Loader/Loader\";\nimport CastList from '../../components/CastList/CastList';\n\nconst Cast = () => {\n    const { movieId } = useParams();\n    const [cast, setCast] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        const getCastByID = async () => {     // основна ф-ція запиту на бекенд\n            setLoading(true);\n            try {\n                const { data } = await api.fetchCastByID(movieId);   // запит на бекенд і відповідь\n                const filteredApiResponse = data.cast.map(({ id, name, character, profile_path }) => ({ id, name, character, profile_path })); //shorthand; усі властивості не потрібні\n                setCast(filteredApiResponse); // запис в стейт відфільтрованих даних про акторський склад              // console.log(...filteredApiResponse);\n            } catch(error) {\n              console.log(error.message); \n            } finally {\n                setLoading(false);\n            }\n        }\n        getCastByID();\n\n    }, [movieId]);\n    \n return (\n    <>\n        { loading && <Loader /> }\n        { cast.length > 0 && <CastList cast={cast} />}   {/* бо пустий масив приводиться до true */}\n    </>\n )\n}\n\nexport default Cast;","import axios from \"axios\";\nconst BASE_URL = 'https://api.themoviedb.org/';\n\nconst options = { // загальні параметри для усіх запитів на бекенд\n    method: 'GET',\n    headers: {\n        accept: 'application/json',\n        Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJhNDI1MGEwMzgzN2JjMWM0MGFkYTM4YjY3YjQxMzRlMyIsInN1YiI6IjY0N2FmOGQ2ZTMyM2YzMDBjNDI5ZDU1YiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.v-u6MiKiDbohMjislfmvIWqj_E9JTpeDNp3nEaFfpD0'\n    }\n};\n\n\nconst fetchTrendingMovies = async () => {\n    try {\n        return await axios.get(`${BASE_URL}3/trending/movie/day?language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\nconst fetchMovieByID = async (movieID) => {\n    try {\n        return await axios.get(`${BASE_URL}3/movie/${movieID}?language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\nconst fetchCastByID = async (movieID) => {\n    try {\n        return await axios.get(`${BASE_URL}3/movie/${movieID}/credits?language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\nconst fetchReviewByID = async (movieID) => {\n    try {\n        return await axios.get(`${BASE_URL}3/movie/${movieID}/reviews?language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\nconst fetchCollectionByQuery = async (keyword) => {\n    try {\n        return await axios.get(`${BASE_URL}3/search/movie?query=${keyword}&include_adult=false&language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\n\nconst api = {\n    fetchTrendingMovies,\n    fetchMovieByID,\n    fetchCastByID,\n    fetchReviewByID,\n    fetchCollectionByQuery,\n};\n\nexport default api;"],"names":["height","width","ariaLabel","wrapperStyle","position","top","left","transform","wrapperClass","borderColor","barColor","List","styled","Name","ListItem","ImageWrapper","cast","map","id","profile_path","name","character","src","alt","movieId","useParams","useState","setCast","loading","setLoading","useEffect","getCastByID","api","data","filteredApiResponse","console","log","message","Loader","length","BASE_URL","options","method","headers","accept","Authorization","fetchTrendingMovies","axios","Error","fetchMovieByID","movieID","fetchCastByID","fetchReviewByID","fetchCollectionByQuery","keyword"],"sourceRoot":""}
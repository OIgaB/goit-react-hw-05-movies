{"version":3,"file":"static/js/408.cecc810f.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","components/CollectionByQuery/CollectionByQuery.jsx","components/pages/Movies/Movies.jsx","services/themoviedb-api.js"],"sourcesContent":["//Компонент спінера відображається, доки відбувається завантаження зображень. \n\nimport { ProgressBar } from  'react-loader-spinner';\n\n\nconst Loader = () => {\n    return (\n        <ProgressBar\n            height=\"90\"\n            width=\"90\"\n            ariaLabel=\"progress-bar-loading\"\n            wrapperStyle={{\n                position: 'fixed',\n                top: '20%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n            }}\n            wrapperClass=\"progress-bar-wrapper\"\n            borderColor = '#f4e02e'\n            barColor = '#515dff'\n        />\n    );\n};\n\nexport default Loader;","import { Link, useLocation } from \"react-router-dom\";\n\nconst CollectionByQuery = ({ moviesByQuery }) => {\n    const location = useLocation();\n\n    return (\n        <ul>\n            {moviesByQuery.map(({ id, original_title }) => {\n                return <Link key={id} to={`${id}`} state={{ from: location }}>{original_title}</Link> \n            })}\n\n        </ul>\n    );\n};\n\nexport default CollectionByQuery;","import { useSearchParams } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport api from '../../../services/themoviedb-api';\nimport Loader from \"../../../components/Loader/Loader\";\nimport CollectionByQuery from '../../../components/CollectionByQuery/CollectionByQuery';\n\nconst Movies = () => {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const [query, setQuery] = useState('');\n    const [moviesByQuery, setMoviesByQuery] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const urlSearchParam = searchParams.get('query') ?? '';\n\n\n    const handleChange = ({ target: {value} }) => { // глибока диструктуризація\n        setQuery(value);\n    }\n    \n        const handleSubmit = (event) => {\n            event.preventDefault();\n            if(query === '') {\n                return setSearchParams({});\n            } else {\n                setSearchParams({ query: query });\n            }\n        }\n\n        useEffect(() => {\n            const getCollectionByQuery = async () => {     // основна ф-ція запиту на бекенд\n                setLoading(true);\n                try {\n                    const { data } = await api.fetchCollectionByQuery(urlSearchParam);   // запит на бекенд і відповідь\n                    const filteredApiResponse = data.results.map(({ id, original_title }) => ({ id, original_title })); //shorthand; усі властивості не потрібні\n                    setMoviesByQuery(filteredApiResponse); // запис в стейт відфільтрованих даних про фільм\n                } catch(error) {\n                  console.log(error.message); \n                } finally {\n                    setLoading(false);\n                }\n            }\n            getCollectionByQuery();\n    \n        }, [urlSearchParam]);\n\n\n return (\n    <>\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\"\n                onChange={handleChange}\n                value={query}\n            />\n            <button type=\"submit\">Search</button>\n        </form>\n        <CollectionByQuery moviesByQuery={moviesByQuery} />\n        { loading && <Loader /> }\n    </>\n )\n}\n\nexport default Movies;","import axios from \"axios\";\nconst BASE_URL = 'https://api.themoviedb.org/';\n\nconst options = { // загальні параметри для усіх запитів на бекенд\n    method: 'GET',\n    headers: {\n        accept: 'application/json',\n        Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJhNDI1MGEwMzgzN2JjMWM0MGFkYTM4YjY3YjQxMzRlMyIsInN1YiI6IjY0N2FmOGQ2ZTMyM2YzMDBjNDI5ZDU1YiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.v-u6MiKiDbohMjislfmvIWqj_E9JTpeDNp3nEaFfpD0'\n    }\n};\n\n\nconst fetchTrendingMovies = async () => {\n    try {\n        return await axios.get(`${BASE_URL}3/trending/movie/day?language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\nconst fetchMovieByID = async (movieID) => {\n    try {\n        return await axios.get(`${BASE_URL}3/movie/${movieID}?language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\nconst fetchCastByID = async (movieID) => {\n    try {\n        return await axios.get(`${BASE_URL}3/movie/${movieID}/credits?language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\nconst fetchReviewByID = async (movieID) => {\n    try {\n        return await axios.get(`${BASE_URL}3/movie/${movieID}/reviews?language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\nconst fetchCollectionByQuery = async (keyword) => {\n    try {\n        return await axios.get(`${BASE_URL}3/search/movie?query=${keyword}&include_adult=false&language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\n\nconst api = {\n    fetchTrendingMovies,\n    fetchMovieByID,\n    fetchCastByID,\n    fetchReviewByID,\n    fetchCollectionByQuery,\n};\n\nexport default api;"],"names":["height","width","ariaLabel","wrapperStyle","position","top","left","transform","wrapperClass","borderColor","barColor","moviesByQuery","location","useLocation","map","id","original_title","to","state","from","useSearchParams","searchParams","setSearchParams","useState","query","setQuery","setMoviesByQuery","loading","setLoading","urlSearchParam","get","useEffect","getCollectionByQuery","api","data","filteredApiResponse","results","console","log","message","onSubmit","event","preventDefault","type","onChange","value","target","Loader","BASE_URL","options","method","headers","accept","Authorization","fetchTrendingMovies","axios","Error","fetchMovieByID","movieID","fetchCastByID","fetchReviewByID","fetchCollectionByQuery","keyword"],"sourceRoot":""}
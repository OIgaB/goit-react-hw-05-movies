{"version":3,"file":"static/js/378.f543e140.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","components/MovieCard/styled.js","components/MovieCard/MovieCard.jsx","pages/MovieDetails/styled.js","pages/MovieDetails/MovieDetails.jsx","services/themoviedb-api.js"],"sourcesContent":["//Компонент спінера відображається, доки відбувається завантаження зображень. \n\nimport { ProgressBar } from  'react-loader-spinner';\n\n\nconst Loader = () => {\n    return (\n        <ProgressBar\n            height=\"90\"\n            width=\"90\"\n            ariaLabel=\"progress-bar-loading\"\n            wrapperStyle={{\n                position: 'fixed',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n            }}\n            wrapperClass=\"progress-bar-wrapper\"\n            borderColor = '#f4e02e'\n            barColor = '#515dff'\n        />\n    );\n};\n\nexport default Loader;","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    background-color: rgb(10, 10, 31);\n    padding: 25px;\n    color: rgb(158, 158, 179);\n`; \n\nexport const ContentWrapper = styled.section`\n    display: flex;\n`; \n\nexport const PosterWrapper = styled.div`\n    width: 300px;\n    height: 400px;\n`; \n\nexport const TextWrapper = styled.div`\n    padding-left: 30px;\n    width: 50%;\n`; \n\nexport const Title = styled.h3`\n    font-size: 35px;\n    color: rgb(205, 205, 223);\n    margin-top: 10px;\n`; \n\nexport const ScoreTitle = styled.p`\n    font-weight: 700;\n`; \n\nexport const ScoreValue = styled.span`\n    margin-left: 10px;\n    font-weight: 400;\n`; ","import { Container, ContentWrapper, TextWrapper, Title, ScoreTitle, ScoreValue, PosterWrapper } from \"./styled\";\nimport PropTypes from 'prop-types';\nimport placeholderImg from '../../services/PlaceholderMoviePoster.jpg';\n\nconst MovieCard = ({ movie }) => {  //movie - це об'єкт\n    const { original_title, genres, overview, poster_path, vote_average, release_date } = movie;  \n    const date = new Date(release_date); // конвертація дати з 2023-03-02 в Thu Mar 02 2023 02:00:00 GMT+0200 щоб потім дістати рік\n    return (\n            <Container>\n                <h2 className=\"visually-hidden\">Selected Movie</h2>\n                <ContentWrapper>\n                    <PosterWrapper>\n                        <img alt={original_title} src={ \n                            poster_path \n                            ? `https://image.tmdb.org/t/p/original/${poster_path}`\n                            : placeholderImg\n                        } />\n                    </PosterWrapper>\n\n                    <TextWrapper>\n                        {original_title && <Title>{original_title} ({date && date.getFullYear()})</Title>}\n                        \n                        <ScoreTitle>User Score:  \n                            {vote_average > 0 \n                                ? <ScoreValue>{vote_average.toFixed(1) * 10}%</ScoreValue> //  {/* toFixed округлення дробових чисел (після коми 1 цифра)   */}\n                                : <ScoreValue>No one has voted yet.</ScoreValue>\n                            }\n                        </ScoreTitle>\n                         \n\n                        <h4>Overview</h4>\n                        <p>{overview ? overview : 'Not available'}</p>\n\n                        {genres &&\n                            <>\n                                <h4>Genres</h4>\n                                <p>{genres.length > 0 \n                                    ? genres.map(genre => genre.name).join(\", \") \n                                    : 'Not available'}\n                                </p>\n                            </>\n                        }\n                    </TextWrapper>\n                </ContentWrapper>\n            </Container>\n    );\n}\n\nexport default MovieCard;\n\n// MovieCard.propTypes = {                                //  - не працює - undefined по кожн власт\n//     movie: PropTypes.shape({\n//         original_title: PropTypes.string.isRequired,\n//         genres: PropTypes.array.isRequired,\n//         overview: PropTypes.string.isRequired,\n//         poster_path: PropTypes.string.isRequired,\n//         vote_average: PropTypes.number.isRequired,\n//         release_date: PropTypes.string.isRequired,\n//     }),\n// };\n\nMovieCard.propTypes = {\n        original_title: PropTypes.string,\n        genres: PropTypes.array,\n        overview: PropTypes.string,\n        poster_path: PropTypes.string,\n        vote_average: PropTypes.number,\n        release_date: PropTypes.string,\n};","import styled from 'styled-components';\n\nexport const GoBackBtn = styled.button`\n    width: 90px;\n    height: 30px;\n    margin-bottom: 20px;\n    margin-left: 35px;\n    background-color: #f9a504;\n    border-radius: 4px;\n    border-color: transparent;\n    &:hover,\n    &:focus {\n        background-color: #b97b07;  \n    }\n`; ","import { useState, useEffect, useRef } from \"react\"; \nimport { useLocation, useNavigate, useParams, NavLink, Outlet } from \"react-router-dom\";\nimport api from '../../services/themoviedb-api';\nimport MovieCard from '../../components/MovieCard/MovieCard';\nimport Loader from \"components/Loader/Loader\";\nimport { Suspense } from 'react';\nimport { ListContainer } from '../../components/Layout/styled';\nimport { GoBackBtn } from './styled';\nimport styled from \"styled-components\";\n\nconst StyledLink = styled(NavLink)`\n    color:#b37606;\n    &.active {\n        color: #f9a504;\n    }\n`;\n\nconst  MovieDetails = () => {\n    const [movie, setMovie] = useState({});\n    const [loading, setLoading] = useState(false);\n    const { movieId } = useParams();\n\n    const navigate = useNavigate();\n    const location = useLocation();\n    const permanentLocation = useRef(location.state?.from ?? '/');  // {current: {…}} => {pathname: '/', search: '', hash: '', state: null, key: ...\n    //const permanentLocation = useRef('/');\n    //console.log(permanentLocation);     // {current: {…}} => {pathname: '/', search: '', hash: '', state: null, key: ...\n\n    useEffect(() => {\n        const getMovieByID = async () => {     // основна ф-ція запиту на бекенд\n            setLoading(true);\n            try {\n                const { data } = await api.fetchMovieByID(movieId);   // запит на бекенд і відповідь\n                const filteredApiResponse = [data].map(({ original_title, genres, overview, poster_path, vote_average, release_date}) => ({ original_title, genres, overview, poster_path, vote_average, release_date })); //shorthand; усі властивості не потрібні\n                setMovie(...filteredApiResponse); // запис в стейт відфільтрованих даних про фільм\n            } catch(error) {\n              console.log(error.message); \n            } finally {\n                setLoading(false);\n            }\n        }\n        getMovieByID();\n\n    }, [movieId]);\n\n    const handleClick = () => {\n        navigate(permanentLocation.current);\n    };\n\n return (\n    <>\n        <GoBackBtn type=\"button\" onClick={handleClick}>Go back</GoBackBtn>\n        <MovieCard movie={movie} />\n        { loading && <Loader /> }\n        <ListContainer>\n            <li>\n                <StyledLink to='cast'>Cast</StyledLink>   \n            </li>\n            <li>\n                <StyledLink to='reviews'>Reviews</StyledLink>\n            </li>       \n        </ListContainer>\n        <Suspense fallback={<div>Loadin...</div>}>\n            <Outlet/>\n        </Suspense>\n    </>\n )\n}\n\nexport default MovieDetails;","import axios from \"axios\";\nconst BASE_URL = 'https://api.themoviedb.org/';\n\nconst options = { // загальні параметри для усіх запитів на бекенд\n    method: 'GET',\n    headers: {\n        accept: 'application/json',\n        Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJhNDI1MGEwMzgzN2JjMWM0MGFkYTM4YjY3YjQxMzRlMyIsInN1YiI6IjY0N2FmOGQ2ZTMyM2YzMDBjNDI5ZDU1YiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.v-u6MiKiDbohMjislfmvIWqj_E9JTpeDNp3nEaFfpD0'\n    }\n};\n\n\nconst fetchTrendingMovies = async () => {\n    try {\n        return await axios.get(`${BASE_URL}3/trending/movie/day?language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\nconst fetchMovieByID = async (movieID) => {\n    try {\n        return await axios.get(`${BASE_URL}3/movie/${movieID}?language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\nconst fetchCastByID = async (movieID) => {\n    try {\n        return await axios.get(`${BASE_URL}3/movie/${movieID}/credits?language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\nconst fetchReviewByID = async (movieID) => {\n    try {\n        return await axios.get(`${BASE_URL}3/movie/${movieID}/reviews?language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\nconst fetchCollectionByQuery = async (keyword) => {\n    try {\n        return await axios.get(`${BASE_URL}3/search/movie?query=${keyword}&include_adult=false&language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\n\nconst api = {\n    fetchTrendingMovies,\n    fetchMovieByID,\n    fetchCastByID,\n    fetchReviewByID,\n    fetchCollectionByQuery,\n};\n\nexport default api;"],"names":["height","width","ariaLabel","wrapperStyle","position","top","left","transform","wrapperClass","borderColor","barColor","Container","styled","ContentWrapper","PosterWrapper","TextWrapper","Title","ScoreTitle","ScoreValue","movie","original_title","genres","overview","poster_path","vote_average","release_date","date","Date","className","alt","src","placeholderImg","getFullYear","toFixed","length","map","genre","name","join","GoBackBtn","StyledLink","NavLink","useState","setMovie","loading","setLoading","movieId","useParams","navigate","useNavigate","location","useLocation","permanentLocation","useRef","state","from","useEffect","getMovieByID","api","data","filteredApiResponse","console","log","message","type","onClick","current","Loader","to","Suspense","fallback","BASE_URL","options","method","headers","accept","Authorization","fetchTrendingMovies","axios","Error","fetchMovieByID","movieID","fetchCastByID","fetchReviewByID","fetchCollectionByQuery","keyword"],"sourceRoot":""}
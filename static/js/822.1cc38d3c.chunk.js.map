{"version":3,"file":"static/js/822.1cc38d3c.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","pages/Home/styled.js","components/CollectionByQuery/CollectionByQuery.jsx","pages/Movies/styled.js","pages/Movies/Movies.jsx","services/themoviedb-api.js"],"sourcesContent":["//Компонент спінера відображається, доки відбувається завантаження зображень. \n\nimport { ProgressBar } from  'react-loader-spinner';\n\n\nconst Loader = () => {\n    return (\n        <ProgressBar\n            height=\"90\"\n            width=\"90\"\n            ariaLabel=\"progress-bar-loading\"\n            wrapperStyle={{\n                position: 'fixed',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n            }}\n            wrapperClass=\"progress-bar-wrapper\"\n            borderColor = '#f4e02e'\n            barColor = '#515dff'\n        />\n    );\n};\n\nexport default Loader;","import styled from 'styled-components';\n\nexport const Title = styled.h2`\n    padding-left: 35px;\n    color: rgb(205, 205, 223);\n`; \n\nexport const List = styled.ul`\n    margin-bottom: 5px;\n    display: flex;\n    gap: 5px;\n    flex-direction: column;\n    font-weight: 700;\n    padding: 15px 15px 15px 35px;\n    background-color: rgb(213, 213, 221);\n`; ","import { Link, useLocation } from \"react-router-dom\";\nimport { List } from '../../pages/Home/styled';\nimport PropTypes from 'prop-types';\nimport styled from \"styled-components\";\n\nconst StyledLink = styled(Link)`\n    color: #021a5f;\n`;\n\nconst CollectionByQuery = ({ moviesByQuery }) => {\n    const location = useLocation();\n    return (\n        <List>\n            {moviesByQuery.map(({ id, original_title }) => {\n                return <StyledLink key={id} to={`${id}`} state={{ from: location }}>{original_title}</StyledLink> \n            })}\n        </List>\n    );\n};\n\nexport default CollectionByQuery;\n\nCollectionByQuery.propTypes = {\n    moviesByQuery: PropTypes.arrayOf(PropTypes.shape ({\n        id: PropTypes.number.isRequired,\n        original_title: PropTypes.string.isRequired,\n    })),\n};","import styled from 'styled-components';\n\nexport const Form = styled.form`\n    display: inline-flex;\n    gap: 15px;\n    border-radius: 4px;\n    padding: 0 15px 15px 35px;\n`;\n\nexport const Input = styled.input`\n    display: block;\n    height: 14px;\n    padding: 7px 10px;\n    font-size: 15px;\n    border-radius: 4px;\n    letter-spacing: 1.3px;\n    border-color: transparent;\n    transition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    outline: none;\n\n    box-shadow: #f9a504 0px 30px 60px -70px inset, rgba(0, 0, 0, 0.9) 0px 18px 36px -18px inset;\n        &:hover,\n        &:focus {\n            border-color: #f9a504;\n        }\n`; \n\nexport const SearchBtn = styled.button`\n    width: 90px;\n    height: 30px;\n    background-color: #f9a504;\n    border-radius: 4px;\n    border-color: transparent;\n    &:hover,\n    &:focus {\n        background-color: #b97b07;  \n    }\n`; ","import { useSearchParams } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport api from '../../services/themoviedb-api';\nimport Loader from \"../../components/Loader/Loader\";\nimport CollectionByQuery from '../../components/CollectionByQuery/CollectionByQuery';\nimport { Form, Input, SearchBtn } from './styled';\n\nconst Movies = () => {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const [query, setQuery] = useState('');\n    const [moviesByQuery, setMoviesByQuery] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const urlSearchParam = searchParams.get('query') ?? '';\n\n\n    const handleChange = ({ target: {value} }) => { // глибока диструктуризація\n        setQuery(value);\n    }\n    \n        const handleSubmit = (event) => {\n            event.preventDefault();\n            if(query === '') {\n                return setSearchParams({});\n            } else {\n                setSearchParams({ query: query });\n            }\n        }\n\n        useEffect(() => {\n            const getCollectionByQuery = async () => {     // основна ф-ція запиту на бекенд\n                setLoading(true);\n                try {\n                    const { data } = await api.fetchCollectionByQuery(urlSearchParam);   // запит на бекенд і відповідь\n                    const filteredApiResponse = data.results.map(({ id, original_title }) => ({ id, original_title })); //shorthand; усі властивості не потрібні\n                    setMoviesByQuery(filteredApiResponse); // запис в стейт відфільтрованих даних про фільм\n                } catch(error) {\n                  console.log(error.message); \n                } finally {\n                    setLoading(false);\n                }\n            }\n            getCollectionByQuery();\n    \n        }, [urlSearchParam]);\n\n\n return (\n    <>\n        <Form onSubmit={handleSubmit}>\n            <Input \n                type=\"text\"\n                onChange={handleChange}\n                value={query}\n            />\n            <SearchBtn type=\"submit\">Search</SearchBtn>\n        </Form>\n        <CollectionByQuery moviesByQuery={moviesByQuery} />\n        { loading && <Loader /> }\n    </>\n )\n}\n\nexport default Movies;","import axios from \"axios\";\nconst BASE_URL = 'https://api.themoviedb.org/';\n\nconst options = { // загальні параметри для усіх запитів на бекенд\n    method: 'GET',\n    headers: {\n        accept: 'application/json',\n        Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJhNDI1MGEwMzgzN2JjMWM0MGFkYTM4YjY3YjQxMzRlMyIsInN1YiI6IjY0N2FmOGQ2ZTMyM2YzMDBjNDI5ZDU1YiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.v-u6MiKiDbohMjislfmvIWqj_E9JTpeDNp3nEaFfpD0'\n    }\n};\n\n\nconst fetchTrendingMovies = async () => {\n    try {\n        return await axios.get(`${BASE_URL}3/trending/movie/day?language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\nconst fetchMovieByID = async (movieID) => {\n    try {\n        return await axios.get(`${BASE_URL}3/movie/${movieID}?language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\nconst fetchCastByID = async (movieID) => {\n    try {\n        return await axios.get(`${BASE_URL}3/movie/${movieID}/credits?language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\nconst fetchReviewByID = async (movieID) => {\n    try {\n        return await axios.get(`${BASE_URL}3/movie/${movieID}/reviews?language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\nconst fetchCollectionByQuery = async (keyword) => {\n    try {\n        return await axios.get(`${BASE_URL}3/search/movie?query=${keyword}&include_adult=false&language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\n\nconst api = {\n    fetchTrendingMovies,\n    fetchMovieByID,\n    fetchCastByID,\n    fetchReviewByID,\n    fetchCollectionByQuery,\n};\n\nexport default api;"],"names":["height","width","ariaLabel","wrapperStyle","position","top","left","transform","wrapperClass","borderColor","barColor","Title","styled","List","StyledLink","Link","moviesByQuery","location","useLocation","map","id","original_title","to","state","from","Form","Input","SearchBtn","useSearchParams","searchParams","setSearchParams","useState","query","setQuery","setMoviesByQuery","loading","setLoading","urlSearchParam","get","useEffect","getCollectionByQuery","api","data","filteredApiResponse","results","console","log","message","onSubmit","event","preventDefault","type","onChange","value","target","Loader","BASE_URL","options","method","headers","accept","Authorization","fetchTrendingMovies","axios","Error","fetchMovieByID","movieID","fetchCastByID","fetchReviewByID","fetchCollectionByQuery","keyword"],"sourceRoot":""}
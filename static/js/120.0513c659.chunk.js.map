{"version":3,"file":"static/js/120.0513c659.chunk.js","mappings":"4JAwBA,IAnBe,WACX,OACI,SAAC,KAAD,CACIA,OAAO,KACPC,MAAM,KACNC,UAAU,uBACVC,aAAc,CACVC,SAAU,QACVC,IAAK,MACLC,KAAM,MACNC,UAAW,yBAEfC,aAAa,uBACbC,YAAc,UACdC,SAAW,WAGtB,C,wJCFD,EApBoB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACnB,OACI,gCACwB,IAAnBA,EAAQC,SAAgB,uBAAG,8CAC5B,wBACKD,EAAQE,KAAI,YAAsD,IAAnDC,EAAkD,EAAlDA,GAAIC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,WACvCC,EAAe,IAAIC,KAAKH,GAAYI,iBACpCC,EAAa,IAAIF,KAAKF,GAAYG,iBACxC,OAAO,2BACC,yBAAG,YAAQ,0BAAON,QAClB,uBAAIC,KACJ,yBAAG,aAAS,0BAAOG,OAClBA,IAAiBG,IAAc,yBAAG,aAAS,0BAAOA,SAJ3CR,EAMnB,QAIhB,ECiBD,EA7BgB,WACZ,IAAQS,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOd,EAAP,KAAgBe,EAAhB,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAc,mCAAG,+FACnBF,GAAW,GADQ,kBAGQG,EAAAA,EAAAA,gBAAoBR,GAH5B,gBAGPS,EAHO,EAGPA,KACFC,EAAsBD,EAAKE,QAAQrB,KAAI,kBAAsD,CAAEC,GAAxD,EAAGA,GAAyDC,OAA5D,EAAOA,OAA6DC,QAApE,EAAeA,QAA8DC,WAA7E,EAAwBA,WAAiEC,WAAzF,EAAoCA,WAApC,IAC7CQ,EAAWO,GALI,kDAOjBE,QAAQC,IAAI,KAAMC,SAPD,yBASfT,GAAW,GATI,6EAAH,qDAYpBE,GACH,GAAE,CAACP,KAGA,gCACMI,IAAW,SAACW,EAAA,EAAD,KACb,SAAC,EAAD,CAAa3B,QAASA,MAGjC,C,8DC/BK4B,EAAW,8BAGXC,EAAU,CACZC,OAAQ,MACRC,QAAS,CACLC,OAAQ,mBACRC,cAAe,+NAIjBC,EAAmB,mCAAG,uGAEPC,EAAAA,EAAAA,IAAA,UAAaP,EAAb,8CAAmEC,GAF5D,8EAId,IAAIO,MAAM,KAAMV,SAJF,wDAAH,qDAQnBW,EAAc,mCAAG,WAAOC,GAAP,0FAEFH,EAAAA,EAAAA,IAAA,UAAaP,EAAb,mBAAgCU,EAAhC,0BAAiET,GAF/D,8EAIT,IAAIO,MAAM,KAAMV,SAJP,wDAAH,sDAQda,EAAa,mCAAG,WAAOD,GAAP,0FAEDH,EAAAA,EAAAA,IAAA,UAAaP,EAAb,mBAAgCU,EAAhC,kCAAyET,GAFxE,8EAIR,IAAIO,MAAM,KAAMV,SAJR,wDAAH,sDAQbc,EAAe,mCAAG,WAAOF,GAAP,0FAEHH,EAAAA,EAAAA,IAAA,UAAaP,EAAb,mBAAgCU,EAAhC,kCAAyET,GAFtE,8EAIV,IAAIO,MAAM,KAAMV,SAJN,wDAAH,sDAUfN,EAAM,CACRc,oBAAAA,EACAG,eAAAA,EACAE,cAAAA,EACAC,gBAAAA,GAGJ,K","sources":["components/Loader/Loader.jsx","components/ReviewsCard/ReviewsCard.jsx","components/pages/Reviews/Reviews.jsx","services/themoviedb-api.js"],"sourcesContent":["//Компонент спінера відображається, доки відбувається завантаження зображень. \n\nimport { ProgressBar } from  'react-loader-spinner';\n\n\nconst Loader = () => {\n    return (\n        <ProgressBar\n            height=\"90\"\n            width=\"90\"\n            ariaLabel=\"progress-bar-loading\"\n            wrapperStyle={{\n                position: 'fixed',\n                top: '20%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n            }}\n            wrapperClass=\"progress-bar-wrapper\"\n            borderColor = '#f4e02e'\n            barColor = '#515dff'\n        />\n    );\n};\n\nexport default Loader;","const ReviewsCard = ({ reviews }) => {\n    return (\n        <>\n            {reviews.length === 0 && <p>We don't have any reviews for this movie</p>}\n            <ul>\n                {reviews.map(({ id, author, content, created_at, updated_at }) => {\n                    const creationDate = new Date(created_at).toLocaleString();\n                    const updateDate = new Date(updated_at).toLocaleString();\n                    return <li key={id}>\n                            <p>Author: <span>{author}</span></p>\n                            <p>{content}</p>\n                            <p>Created: <span>{creationDate}</span></p>\n                            {creationDate !== updateDate && <p>Updated: <span>{updateDate}</span></p>}\n                        </li>\n                })}\n            </ul>\n        </>\n    )    \n}\n\nexport default ReviewsCard;","import { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from 'react';\nimport api from '../../../services/themoviedb-api';\nimport Loader from \"../../Loader/Loader\";\nimport ReviewsCard from '../../ReviewsCard/ReviewsCard';\n\nconst Reviews = () => {\n    const { movieId } = useParams();\n    const [reviews, setReviews] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        const getReviewsByID = async () => {     // основна ф-ція запиту на бекенд\n            setLoading(true);\n            try {\n                const { data } = await api.fetchReviewByID(movieId);   // запит на бекенд і відповідь\n                const filteredApiResponse = data.results.map(({ id, author, content, created_at, updated_at }) => ({ id, author, content, created_at, updated_at })); //shorthand; усі властивості не потрібні\n                setReviews(filteredApiResponse); // запис в стейт відфільтрованих даних про відгуки\n            } catch(error) {\n              console.log(error.message); \n            } finally {\n                setLoading(false);\n            }\n        }\n        getReviewsByID();\n    }, [movieId]);\n\n    return (\n        <>\n            { loading && <Loader /> }\n            <ReviewsCard reviews={reviews} />\n        </>\n    )\n}\n\nexport default Reviews;","import axios from \"axios\";\n// const API_KEY = 'a4250a03837bc1c40ada38b67b4134e3';\nconst BASE_URL = 'https://api.themoviedb.org/';\n\n\nconst options = {\n    method: 'GET',\n    headers: {\n        accept: 'application/json',\n        Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJhNDI1MGEwMzgzN2JjMWM0MGFkYTM4YjY3YjQxMzRlMyIsInN1YiI6IjY0N2FmOGQ2ZTMyM2YzMDBjNDI5ZDU1YiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.v-u6MiKiDbohMjislfmvIWqj_E9JTpeDNp3nEaFfpD0'\n    }\n};\n\nconst fetchTrendingMovies = async () => {\n    try {\n        return await axios.get(`${BASE_URL}3/trending/movie/day?language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\nconst fetchMovieByID = async (movieID) => {\n    try {\n        return await axios.get(`${BASE_URL}3/movie/${movieID}?language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\nconst fetchCastByID = async (movieID) => {\n    try {\n        return await axios.get(`${BASE_URL}3/movie/${movieID}/credits?language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\nconst fetchReviewByID = async (movieID) => {\n    try {\n        return await axios.get(`${BASE_URL}3/movie/${movieID}/reviews?language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n// https://api.themoviedb.org/3/movie/movie_id/reviews?language=en-US&page=1\n\n\nconst api = {\n    fetchTrendingMovies,\n    fetchMovieByID,\n    fetchCastByID,\n    fetchReviewByID,\n};\n\nexport default api;"],"names":["height","width","ariaLabel","wrapperStyle","position","top","left","transform","wrapperClass","borderColor","barColor","reviews","length","map","id","author","content","created_at","updated_at","creationDate","Date","toLocaleString","updateDate","movieId","useParams","useState","setReviews","loading","setLoading","useEffect","getReviewsByID","api","data","filteredApiResponse","results","console","log","message","Loader","BASE_URL","options","method","headers","accept","Authorization","fetchTrendingMovies","axios","Error","fetchMovieByID","movieID","fetchCastByID","fetchReviewByID"],"sourceRoot":""}
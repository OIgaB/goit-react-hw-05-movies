{"version":3,"file":"static/js/735.0149e899.chunk.js","mappings":"4JAwBA,IAnBe,WACX,OACI,SAAC,KAAD,CACIA,OAAO,KACPC,MAAM,KACNC,UAAU,uBACVC,aAAc,CACVC,SAAU,QACVC,IAAK,MACLC,KAAM,MACNC,UAAW,yBAEfC,aAAa,uBACbC,YAAc,UACdC,SAAW,WAGtB,C,wJCND,EAhBiB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAChB,OACI,+BACI,wBACKA,GAAQA,EAAKC,KAAI,YAA0C,IAAxCC,EAAuC,EAAvCA,GAAIC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,UACxC,OAAO,0BACFF,IAAgB,gBAAKG,IAAI,QAAQC,IAAG,8CAAyCJ,GAAgBb,MAAM,SACpG,uBAAIc,IACHC,IAAa,yBAAG,eAAW,0BAAOA,SAHvBH,EAKnB,OAIhB,ECsBD,EA9Ba,WACT,IAAQM,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOV,EAAP,KAAaW,EAAb,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KAmBH,OAjBGC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAW,mCAAG,+FAChBF,GAAW,GADK,kBAGWG,EAAAA,EAAAA,cAAkBR,GAH7B,gBAGJS,EAHI,EAGJA,KACFC,EAAsBD,EAAKjB,KAAKC,KAAI,kBAA4C,CAAEC,GAA9C,EAAGA,GAA+CE,KAAlD,EAAOA,KAAiDC,UAAxD,EAAaA,UAAsDF,aAAnE,EAAwBA,aAAxB,IAC1CQ,EAAQO,GALI,kDAOdC,QAAQC,IAAI,KAAMC,SAPJ,yBASZR,GAAW,GATC,6EAAH,qDAYjBE,GAEH,GAAE,CAACP,KAGJ,gCACMI,IAAW,SAACU,EAAA,EAAD,KACb,SAAC,EAAD,CAAUtB,KAAMA,MAGvB,C,8DCjCKuB,EAAW,8BAEXC,EAAU,CACZC,OAAQ,MACRC,QAAS,CACLC,OAAQ,mBACRC,cAAe,+NAKjBC,EAAmB,mCAAG,uGAEPC,EAAAA,EAAAA,IAAA,UAAaP,EAAb,8CAAmEC,GAF5D,8EAId,IAAIO,MAAM,KAAMV,SAJF,wDAAH,qDAQnBW,EAAc,mCAAG,WAAOC,GAAP,0FAEFH,EAAAA,EAAAA,IAAA,UAAaP,EAAb,mBAAgCU,EAAhC,0BAAiET,GAF/D,8EAIT,IAAIO,MAAM,KAAMV,SAJP,wDAAH,sDAQda,EAAa,mCAAG,WAAOD,GAAP,0FAEDH,EAAAA,EAAAA,IAAA,UAAaP,EAAb,mBAAgCU,EAAhC,kCAAyET,GAFxE,8EAIR,IAAIO,MAAM,KAAMV,SAJR,wDAAH,sDAQbc,EAAe,mCAAG,WAAOF,GAAP,0FAEHH,EAAAA,EAAAA,IAAA,UAAaP,EAAb,mBAAgCU,EAAhC,kCAAyET,GAFtE,8EAIV,IAAIO,MAAM,KAAMV,SAJN,wDAAH,sDAQfe,EAAsB,mCAAG,WAAOC,GAAP,0FAEVP,EAAAA,EAAAA,IAAA,UAAaP,EAAb,gCAA6Cc,EAA7C,8CAAkGb,GAFxF,8EAIjB,IAAIO,MAAM,KAAMV,SAJC,wDAAH,sDAStBL,EAAM,CACRa,oBAAAA,EACAG,eAAAA,EACAE,cAAAA,EACAC,gBAAAA,EACAC,uBAAAA,GAGJ,K","sources":["components/Loader/Loader.jsx","components/CastCard/CastCard.jsx","components/pages/Cast/Cast.jsx","services/themoviedb-api.js"],"sourcesContent":["//Компонент спінера відображається, доки відбувається завантаження зображень. \n\nimport { ProgressBar } from  'react-loader-spinner';\n\n\nconst Loader = () => {\n    return (\n        <ProgressBar\n            height=\"90\"\n            width=\"90\"\n            ariaLabel=\"progress-bar-loading\"\n            wrapperStyle={{\n                position: 'fixed',\n                top: '20%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n            }}\n            wrapperClass=\"progress-bar-wrapper\"\n            borderColor = '#f4e02e'\n            barColor = '#515dff'\n        />\n    );\n};\n\nexport default Loader;","const CastCard = ({ cast }) => {\n    return (\n        <>\n            <ul>\n                {cast && cast.map(({id, profile_path, name, character}) => {\n                    return <li key={id}>\n                        {profile_path && <img alt=\"actor\" src={`https://image.tmdb.org/t/p/original/${profile_path}`} width='200'/>}\n                        <p>{name}</p>\n                        {character && <p>Character: <span>{character}</span></p>}\n                    </li>  \n                })}\n            </ul>\n        </>\n    );\n}\n\nexport default CastCard;","import { useState, useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport api from '../../../services/themoviedb-api';\nimport Loader from \"../../Loader/Loader\";\nimport CastCard from '../../CastCard/CastCard';\n\nconst Cast = () => {\n    const { movieId } = useParams();\n    const [cast, setCast] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        const getCastByID = async () => {     // основна ф-ція запиту на бекенд\n            setLoading(true);\n            try {\n                const { data } = await api.fetchCastByID(movieId);   // запит на бекенд і відповідь\n                const filteredApiResponse = data.cast.map(({ id, name, character, profile_path }) => ({ id, name, character, profile_path })); //shorthand; усі властивості не потрібні\n                setCast(filteredApiResponse); // запис в стейт відфільтрованих даних про акторський склад              // console.log(...filteredApiResponse);\n            } catch(error) {\n              console.log(error.message); \n            } finally {\n                setLoading(false);\n            }\n        }\n        getCastByID();\n\n    }, [movieId]);\n    \n return (\n    <>\n        { loading && <Loader /> }\n        <CastCard cast={cast} />\n    </>\n )\n}\n\nexport default Cast;","import axios from \"axios\";\nconst BASE_URL = 'https://api.themoviedb.org/';\n\nconst options = { // загальні параметри для усіх запитів на бекенд\n    method: 'GET',\n    headers: {\n        accept: 'application/json',\n        Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJhNDI1MGEwMzgzN2JjMWM0MGFkYTM4YjY3YjQxMzRlMyIsInN1YiI6IjY0N2FmOGQ2ZTMyM2YzMDBjNDI5ZDU1YiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.v-u6MiKiDbohMjislfmvIWqj_E9JTpeDNp3nEaFfpD0'\n    }\n};\n\n\nconst fetchTrendingMovies = async () => {\n    try {\n        return await axios.get(`${BASE_URL}3/trending/movie/day?language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\nconst fetchMovieByID = async (movieID) => {\n    try {\n        return await axios.get(`${BASE_URL}3/movie/${movieID}?language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\nconst fetchCastByID = async (movieID) => {\n    try {\n        return await axios.get(`${BASE_URL}3/movie/${movieID}/credits?language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\nconst fetchReviewByID = async (movieID) => {\n    try {\n        return await axios.get(`${BASE_URL}3/movie/${movieID}/reviews?language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\nconst fetchCollectionByQuery = async (keyword) => {\n    try {\n        return await axios.get(`${BASE_URL}3/search/movie?query=${keyword}&include_adult=false&language=en-US&page=1`, options); \n    } catch(error) {\n        throw new Error(error.message);\n    }\n}\n\n\nconst api = {\n    fetchTrendingMovies,\n    fetchMovieByID,\n    fetchCastByID,\n    fetchReviewByID,\n    fetchCollectionByQuery,\n};\n\nexport default api;"],"names":["height","width","ariaLabel","wrapperStyle","position","top","left","transform","wrapperClass","borderColor","barColor","cast","map","id","profile_path","name","character","alt","src","movieId","useParams","useState","setCast","loading","setLoading","useEffect","getCastByID","api","data","filteredApiResponse","console","log","message","Loader","BASE_URL","options","method","headers","accept","Authorization","fetchTrendingMovies","axios","Error","fetchMovieByID","movieID","fetchCastByID","fetchReviewByID","fetchCollectionByQuery","keyword"],"sourceRoot":""}